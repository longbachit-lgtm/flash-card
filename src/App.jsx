import React, { useState } from "react";
import feather from "feather-icons";
import { useEffect } from "react";
import parse from "html-react-parser";

const cardDecks = {
  business: [
    "<b>Chi·∫øn Th·∫Øng Tr√≤ Ch∆°i B√™n Trong</b> <br> üîÆ Ph∆∞∆°ng ph√°p B√ôA ‚Äì CH√ö : D√°n xung quanh nh·∫Øc nh·ªü m√¨nh, th·ªÉ hi·ªán nƒÉng l∆∞·ª£ng cao v√† ƒë·ªçc th∆∞·ªùng xuy√™n ‚ÄúTHAY V√å N√ìI T√îI NGU L·∫ÆM ‚Üí T√îI GI·ªéI L·∫ÆM.N·∫æU NH·∫¨N M√åNH NGU M√åNH S·∫º D·ª™NG H√ÄNH ƒê·ªòNG  ",

  ],
  finance: [
    "Ti·∫øt ki·ªám ti·ªÅn l√† ki·∫øm ti·ªÅn. - Benjamin Franklin",
    "ƒê·ª´ng ti·∫øt ki·ªám nh·ªØng g√¨ c√≤n l·∫°i sau khi chi ti√™u, h√£y chi ti√™u nh·ªØng g√¨ c√≤n l·∫°i sau khi ti·∫øt ki·ªám.",
    "Gi√° tr·ªã th·ª±c s·ª± c·ªßa ƒë·ªìng ti·ªÅn n·∫±m ·ªü c√°ch b·∫°n s·ª≠ d·ª•ng n√≥.",
    "ƒêa d·∫°ng h√≥a ƒë·∫ßu t∆∞ ƒë·ªÉ gi·∫£m thi·ªÉu r·ªßi ro.",
    "L√£i k√©p l√† k·ª≥ quan th·ª© 8 c·ªßa th·∫ø gi·ªõi. - Albert Einstein",
  ],
  motivation: [
    "ƒê·∫ßu t∆∞ v√†o ki·∫øn th·ª©c lu√¥n mang l·∫°i l·ª£i nhu·∫≠n cao nh·∫•t.",
    "C∆° h·ªôi kh√¥ng ƒë·∫øn t·ª´ may m·∫Øn, n√≥ ƒë·∫øn t·ª´ s·ª± chu·∫©n b·ªã.",
    "ƒê·∫ßu t∆∞ v√†o b·∫£n th√¢n l√† kho·∫£n ƒë·∫ßu t∆∞ kh√¥ng bao gi·ªù l·ªó.",
    "Th·∫•t b·∫°i ch·ªâ l√† c∆° h·ªôi ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i m·ªôt c√°ch th√¥ng minh h∆°n. - Henry Ford",
    "ƒê·ª´ng s·ª£ t·ª´ b·ªè ƒëi·ªÅu t·ªët ƒë·ªÉ theo ƒëu·ªïi ƒëi·ªÅu tuy·ªát v·ªùi. - John D. Rockefeller",
  ],
};

function App() {
  const [flippedCards, setFlippedCards] = useState([false, false, false]);
  const [currentMessages, setCurrentMessages] = useState(["", "", ""]);
  const [showConfetti, setShowConfetti] = useState(false);
  const [activeDeck, setActiveDeck] = useState("business");

  const flipCard = (index) => {
    if (!flippedCards[index]) {
      const deck = cardDecks[activeDeck];
      const randomIndex = Math.floor(Math.random() * deck.length);
      const newMessages = [...currentMessages];
      newMessages[index] = deck[randomIndex];
      setCurrentMessages(newMessages);
      setShowConfetti(true);
      setTimeout(() => setShowConfetti(false), 3000);
    }
    const newFlipped = [...flippedCards];
    newFlipped[index] = !newFlipped[index];
    setFlippedCards(newFlipped);
  };

  const resetAllCards = () => {
    setFlippedCards([false, false, false]);
    setCurrentMessages(["", "", ""]);
  };

  const changeDeck = (deckType) => {
    setActiveDeck(deckType);
    resetAllCards();
  };

  useEffect(() => {
    feather.replace();
  }, [flippedCards, activeDeck]);

  return (
    <div className="flex flex-col items-center">
      <h1 className="text-3xl md:text-4xl font-bold text-center mb-6 font-playfair text-indigo-900">
        L·ªùi Khuy√™n{" "}
        {activeDeck === "business"
          ? "Kinh Doanh"
          : activeDeck === "finance"
            ? "T√†i Ch√≠nh"
            : "T·∫°o ƒê·ªông L·ª±c"}{" "}
        H√¥m Nay
      </h1>

      <div className="flex gap-4 mb-6">
        <button
          onClick={() => changeDeck("business")}
          className={`px-4 py-2 rounded-lg ${activeDeck === "business"
              ? "bg-indigo-600 text-white"
              : "bg-gray-200 text-gray-700"
            }`}
        >
          Kinh Doanh
        </button>
        <button
          onClick={() => changeDeck("finance")}
          className={`px-4 py-2 rounded-lg ${activeDeck === "finance"
              ? "bg-indigo-600 text-white"
              : "bg-gray-200 text-gray-700"
            }`}
        >
          T√†i Ch√≠nh
        </button>
        <button
          onClick={() => changeDeck("motivation")}
          className={`px-4 py-2 rounded-lg ${activeDeck === "motivation"
              ? "bg-indigo-600 text-white"
              : "bg-gray-200 text-gray-700"
            }`}
        >
          ƒê·ªông L·ª±c
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        {[0, 1, 2].map((index) => (
          <div
            key={index}
            className={`card ${flippedCards[index] ? "flipped" : ""
              } cursor-pointer`}
            onClick={() => flipCard(index)}
          >
            <div className="card-inner">
              <div className="card-front bg-gradient-to-br from-indigo-600 to-blue-500 text-white">
                <i
                  data-feather={
                    index === 0 ? "zap" : index === 1 ? "trending-up" : "star"
                  }
                  className="w-16 h-16 mb-6 text-yellow-300"
                ></i>
                <h2 className="text-2xl font-bold mb-2 text-center font-playfair">
                  Th·∫ª {index + 1}
                </h2>
                <p className="text-center opacity-90">Nh·∫≠n l·ªùi khuy√™n h·ªØu √≠ch</p>
              </div>
              <div className="card-back bg-gradient-to-br from-amber-50 to-yellow-100">
                <i
                  data-feather="award"
                  className="w-16 h-16 mb-6 text-amber-500"
                ></i>
                <p className="text-lg md:text-xl text-center font-medium text-gray-800 font-poppins">
                  {parse(currentMessages[index])}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>

      <button
        onClick={resetAllCards}
        className="px-6 py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg shadow-md transition duration-300 flex items-center"
      >
        <i data-feather="refresh-cw" className="mr-2"></i>
        L·∫≠t L·∫°i T·∫•t C·∫£
      </button>

      {showConfetti && (
        <div className="fixed inset-0 pointer-events-none">
          {[...Array(50)].map((_, i) => (
            <div
              key={i}
              className="absolute w-2 h-2 bg-yellow-400 rounded-full"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                animation: `fall ${Math.random() * 3 + 2}s linear forwards`,
              }}
            />
          ))}
        </div>
      )}
    </div>
  );
}

export default App;
